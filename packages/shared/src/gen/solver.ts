// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.175.0
//   protoc               unknown
// source: solver.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "solver";

export interface SubgameRequest {
  stateFingerprint: string;
}

export interface SubgameResponse {
  actions: string[];
  probabilities: number[];
}

function createBaseSubgameRequest(): SubgameRequest {
  return { stateFingerprint: "" };
}

export const SubgameRequest = {
  encode(message: SubgameRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.stateFingerprint !== "") {
      writer.uint32(10).string(message.stateFingerprint);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubgameRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubgameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stateFingerprint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubgameRequest {
    return { stateFingerprint: isSet(object.stateFingerprint) ? globalThis.String(object.stateFingerprint) : "" };
  },

  toJSON(message: SubgameRequest): unknown {
    const obj: any = {};
    if (message.stateFingerprint !== "") {
      obj.stateFingerprint = message.stateFingerprint;
    }
    return obj;
  },

  create(base?: DeepPartial<SubgameRequest>): SubgameRequest {
    return SubgameRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubgameRequest>): SubgameRequest {
    const message = createBaseSubgameRequest();
    message.stateFingerprint = object.stateFingerprint ?? "";
    return message;
  },
};

function createBaseSubgameResponse(): SubgameResponse {
  return { actions: [], probabilities: [] };
}

export const SubgameResponse = {
  encode(message: SubgameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.actions) {
      writer.uint32(10).string(v!);
    }
    writer.uint32(18).fork();
    for (const v of message.probabilities) {
      writer.double(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubgameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubgameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actions.push(reader.string());
          continue;
        case 2:
          if (tag === 17) {
            message.probabilities.push(reader.double());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.probabilities.push(reader.double());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubgameResponse {
    return {
      actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e: any) => globalThis.String(e)) : [],
      probabilities: globalThis.Array.isArray(object?.probabilities)
        ? object.probabilities.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: SubgameResponse): unknown {
    const obj: any = {};
    if (message.actions?.length) {
      obj.actions = message.actions;
    }
    if (message.probabilities?.length) {
      obj.probabilities = message.probabilities;
    }
    return obj;
  },

  create(base?: DeepPartial<SubgameResponse>): SubgameResponse {
    return SubgameResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubgameResponse>): SubgameResponse {
    const message = createBaseSubgameResponse();
    message.actions = object.actions?.map((e) => e) || [];
    message.probabilities = object.probabilities?.map((e) => e) || [];
    return message;
  },
};

export type SolverService = typeof SolverService;
export const SolverService = {
  solve: {
    path: "/solver.Solver/Solve",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SubgameRequest) => Buffer.from(SubgameRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SubgameRequest.decode(value),
    responseSerialize: (value: SubgameResponse) => Buffer.from(SubgameResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SubgameResponse.decode(value),
  },
} as const;

export interface SolverServer extends UntypedServiceImplementation {
  solve: handleUnaryCall<SubgameRequest, SubgameResponse>;
}

export interface SolverClient extends Client {
  solve(
    request: SubgameRequest,
    callback: (error: ServiceError | null, response: SubgameResponse) => void,
  ): ClientUnaryCall;
  solve(
    request: SubgameRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SubgameResponse) => void,
  ): ClientUnaryCall;
  solve(
    request: SubgameRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SubgameResponse) => void,
  ): ClientUnaryCall;
}

export const SolverClient = makeGenericClientConstructor(SolverService, "solver.Solver") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SolverClient;
  service: typeof SolverService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
