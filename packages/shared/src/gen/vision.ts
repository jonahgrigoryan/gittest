// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.175.0
//   protoc               v6.33.0
// source: vision.proto

/* eslint-disable */
import {
  ChannelCredentials,
  Client,
  type ClientOptions,
  makeGenericClientConstructor,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "vision";

export interface Placeholder {
}

function createBasePlaceholder(): Placeholder {
  return {};
}

export const Placeholder = {
  encode(_: Placeholder, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Placeholder {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceholder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Placeholder {
    return {};
  },

  toJSON(_: Placeholder): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Placeholder>): Placeholder {
    return Placeholder.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Placeholder>): Placeholder {
    const message = createBasePlaceholder();
    return message;
  },
};

export type VisionServiceService = typeof VisionServiceService;
export const VisionServiceService = {} as const;

export interface VisionServiceServer extends UntypedServiceImplementation {
}

export interface VisionServiceClient extends Client {
}

export const VisionServiceClient = makeGenericClientConstructor(
  VisionServiceService,
  "vision.VisionService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): VisionServiceClient;
  service: typeof VisionServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
